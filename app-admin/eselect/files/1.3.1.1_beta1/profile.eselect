# -*-eselect-*-  vim: ft=eselect
# Copyright 2012 Funtoo Technologies LLC
# Distributed under the terms of the GNU General Public License v2
# $Id: $

# This is a portage-only module.
# This version of profile.eselect is written for use with Funtoo's
# multi-profile approach

inherit package-manager output

DESCRIPTION="Manage portage profiles"
MAINTAINER="rh1@programmer.net"
VERSION="funtoo-1.0_beta"

if [[ -z "${MAKE_PROFILE_DIR}" ]] ; then
	MAKE_PROFILE_DIR="/etc/portage/make.profile"
fi

if [[ -z "${PARENT_FILE}" ]] ; then
	PARENT_FILE="${MAKE_PROFILE_DIR}/parent"
fi

if [[ -z "${PROFILE_DIRECTORY}" ]] ; then
	PROFILE_DIRECTORY="$(portageq portdir)/profiles"
fi

if [[ -z "${PROFILE_DESC_FILE}" ]] ; then
	PROFILE_DESC_FILE="${PROFILE_DIRECTORY}/profiles.desc"
fi

if [[ -z "${TEMP_PARENT_FILE}" ]] ; then
	TEMP_PARENT_FILE="$(mktemp)"
fi

# Create path to parent if needed.
if [[ ! -e $(dirname "${PARENT_FILE}") ]] ; then
	mkdir -p $(dirname "${PARENT_FILE}")
fi

# Create PARENT_FILE if it doesn't exist.
if [[ ! -e "${PARENT_FILE}" ]] ; then
	touch "${PARENT_FILE}" || die -q "Error creating ${PARENT_FILE}"
fi

# List of funtoo profiles
get_funtoo_list() {
	local defaults arch build flavor mixins

	arch=( $(awk '$1 == "arch" { print $2 }' "${PROFILE_DESC_FILE}") )
	build=( $(awk '$1 == "build" { print $2 }' "${PROFILE_DESC_FILE}") )
	flavor=( $(awk '$1 == "flavor" { print $2 }' "${PROFILE_DESC_FILE}") )
	mixins=( $(awk '$1 == "mix-ins" { print $2 }' "${PROFILE_DESC_FILE}") )
	defaults=( $(awk '$1 == "2008" { print $2 }' "${PROFILE_DESC_FILE}") )

	for profile in ${arch[@]} ; do
		echo "${profile}"
	done
	for profile in ${build[@]} ; do
		echo "${profile}"
	done
	for profile in ${flavor[@]} ; do
		echo "${profile}"
	done
	for profile in ${mixins[@]} ; do
		echo "${profile}"
	done
	for profile in ${defaults[@]} ; do
		echo "${profile}"
	done

}

# Returns list of current profiles in PARENT_FILE
get_current_profiles() {
	# Only echo lines that aren't comments
	while read line ; do
		if [[ "${line:0:1}" != "#" ]] ; then
			echo "${line}"
		fi
	done < "${PARENT_FILE}"
}

# Converts the numbers you get running 'eselect profile list'
# $1 = Number to convert
convert_list_number() {
	[[ -z "${1}" ]] && die -q "No number to convert"
	local targets
	targets=( $(get_funtoo_list) )
	[[ -z ${targets} ]] && die -q "Failed to get a list of valid profiles"
	echo "${targets[${1} - 1]}"
}

# Checks if a profile is in the "NoMix" list of any currently used profile.
# $1 = Profile to check.
check_for_nomix() {
	local target="${1}"

	# Check if absolute or realative path. NoMix is only supported for funtoo profiles using ":" at this time
	if [[ "${target:0:1}" == "/"  || "${target:0:1}" == "." ]] ; then
		return
	fi

	# Remove colon from beginning of profile name.
	if [[ "${target:0:1}" == ":" ]] ; then
		target="${target:1}"
	fi

	local nomix=( $(awk '( $2 == "'"${target}"'" ) && ( NF > 3 ) { print $4 }' "${PROFILE_DESC_FILE}" | \
	    awk -F "," '{ for ( x = 1; x <= NF; x++ ) { print $x } }') )

	local current_profiles=( $(get_current_profiles) )

	local profile_path="${target}"
	while [[ ${profile_path} ]] ; do
		if [[ "$(basename ${profile_path})" != "arch" && \
			"$(basename ${profile_path})" != "build" && \
			"$(basename ${profile_path})" != "flavor" && \
			"$(basename ${profile_path})" != "mix-ins" ]] ; then

			profile_path=$(dirname "${profile_path}")

			# If we can't find arch/build/flavors/mix-ins in name then must not be funtoo profile.
			# Probably old 2008 profile. NoMix isn't supported, just return.
			if [[ "${profile_path}" == "." ]] ; then
				return
			fi
		else
			break
		fi
	done

	profile_path=$(dirname "${profile_path}")
	if [[ -n "${nomix}" ]] ; then
		for profile in "${nomix[@]}" ; do
			local profile_name
			if [[ "${profile:0:5}" == "arch/" || "${profile:0:6}" == "build/" || "${profile:0:7}" == "flavor/" || "${profile:0:8}" == "mix-ins/" ]] ; then
				profile_name="${profile_path}/${profile}"
			else
				profile_name="${profile_path}/mix-ins/${profile}"
			fi

			for curr_pro in ${current_profiles[@]} ; do
				if [[ "${curr_pro:0:1}" == "/" || "${curr_pro:0:1}" == "." ]] ; then
					continue
				elif [[ "${curr_pro:0:1}" == ":" ]] ; then
					curr_pro="${curr_pro:1}"
				fi

				if [[ "${profile_name}" == "${curr_pro}" ]] ; then
					echo "${profile_name}"
				fi
			done
		done
	fi
	return
}

write_important_msg() {
	local message="${1}"
	echo -e "${COLOUR_BOLD}!!! Important: ${COLOUR_NORMAL}${*}" 1>&2
}

# Checks if profile is in $PARENT_FILE
# $1 = profile to look for
check_for_current_profile() {
	local current_profiles=( $(get_current_profiles) )
	for profile in ${current_profiles[@]} ; do
		# Remove colon if present
		if [[ "${profile:0:1}" == ":" ]] ; then
			profile="${profile:1}"
		fi

		if [[ "${profile}" == "${1}" ]] ; then
			echo "True"
			return
		fi
	done
}

# This is a convenience method used to die if multiple arch, build, flavor, or 2008 profiles are used
# $1 = type
die_with_multiple_profiles() {
	die -q "Your current profile already contains a '${1}' profile. You should only have one '${1}' in your profile. Remove it first or use 'replace' to change. Aborting."
}

# Checks if profile exists
# $1 = Profile to check
validate_profile() {

	local profile_valid target="${1}"
	if [[ "$target:0:1}" == "/" ]] ; then
		if [[ -d "${target}" ]] ; then
			profile_valid="True"
		fi
	elif [[ "${target:0:1}" == "." ]] ; then
		if [[ -d "${MAKE_PROFILE_DIR}/${target}" ]] ; then
			profile_valid="True"
		fi
	else
		if [[ "${target:0:1}" == ":" ]] ; then
			target="${target:1}"
		fi
		if [[ -d "${PROFILE_DIRECTORY}/${target}" ]] ; then
			profile_valid="True"
		fi
	fi

	echo "${profile_valid}"
}

# Checks for valid config file.
validate_config_file() {

	# Make sure config file only contains one arch, build, and flavor
	local arch=0 build=0 flavor=0
	for profile in $( get_current_profiles ) ; do
		if [[ "${profile:0:1}" == ":" ]] ; then
			curr_type=( $(awk '$2 == "'"${profile:1}"'"  { print $1 }' "${PROFILE_DESC_FILE}") )
			case "${curr_type}" in
				arch)
					arch=$((arch+=1))
					;;
				build)
					build=$((build+=1))
					;;
				flavor)
					flavor=$((flavor+=1))
					;;
			esac
		fi
	done

	local valid="True" missing_pro extra_pro m=0 e=0
	if [[ "${arch}" < 1 ]] ; then
		missing_pro[${m}]="arch"
		m=$((m + 1))
		valid="False"
	elif [[ "${arch}" > 1 ]] ; then
		extra_pro[${e}]="arch"
		e=$((e + 1))
		valid="False"
	fi

	if [[ "${build}" < 1 ]] ; then
		missing_pro[${m}]="build"
		m=$((m + 1))
		valid="False"
	elif [[ "${build}" > 1 ]] ; then
		extra_pro[${e}]="build"
		e=$((e + 1))
		valid="False"
	fi

	if [[ "${flavor}" < 1 ]] ; then
		missing_pro[${m}]="flavor"
		m=$((m + 1))
		valid="False"
	elif [[ "${flavor}" > 1 ]] ; then
		extra_pro[${e}]="flavor"
		e=$((e + 1))
		valid="False"
	fi

	if (( ${#missing_pro[@]} > 0 )) ; then
		write_warning_msg "Your current profile doesn't contain any '${missing_pro[@]}' profile(s). Please add one of each."
	fi

	if (( ${#extra_pro[@]} > 0 )) ; then
		write_warning_msg "Your current profile contains more than one each of these profiles : '${extra_pro[@]}' This is not recommended and unsupported."
	fi

	for profile in $( get_current_profiles ) ; do
		valid_profile=( $(validate_profile "${profile}") )
		if [[ "${valid_profile}" != "True" ]] ; then
			write_warning_msg "${profile} does not appear to be a valid profile."
			valid="False"
		fi
	done

	# Return $valid
	echo "${valid}"
}

### LIST ACTION ###

# Writes a funtoo list entry. Used with write_numbered_funtoo_list().
# $1 = List number, $2 = Name of profile, $3 = Type of profile (arch, build, etc ..) $4 = Status flag (stable or other), $5 = Number of spaces in between name and status
write_numbered_funtoo_list_entry() {

	local list_num="${1}"
	local profile="${2}"
	local profile_type="${3}"
	local status="${4}"
	local spacing
	if [[ -n "${5}" ]] ; then
		spacing="${5}"
	else
		spacing="3"
	fi

	# Check if in current profile
	local in_current=( $(check_for_current_profile "${profile}") )
	if [[ "${in_current}" == "True" ]] ; then
		profile="${profile} *"
		spacing=$(( ${spacing} - 2 ))
	fi

	# Set colors
	local left="${COLOUR_LIST_LEFT}"
	local right="${COLOUR_LIST_RIGHT}"
	local normal="${COLOUR_NORMAL}"
	local stable="${COLOUR_LIST_HEADER}"
	local not_stable="${COLOUR_WARN}"

	# List number
	echo -n -e "  ${left}"
	echo -n -e "[$(apply_text_highlights "${left}" "${list_num}")]"
	echo -n -e "${normal}"
	space $(( 4 - ${#list_num} ))

	# Profile name
	shortname="${profile#funtoo/*/${profile_type}/}"
	echo -n -e "${right}"
	echo -n -e "$(apply_text_highlights "${right}" "${shortname}")"

	# Profile status
	if [[ -n "${status}" ]] ; then
		echo -n -e "${normal}"
		space "${spacing}"

		if [[ "${status}" == "stable" ]] ; then
			echo -n -e "${stable}"
			echo -n -e "$(apply_text_highlights "${stable}" " ${status}")"
			echo -e "${normal}"
		else
			echo -n -e "${not_stable}"
			echo -n -e "$(apply_text_highlights "${stable}" "${status}")"
			echo -e "${normal}"
		fi
	else
		echo -e "${normal}"
	fi
}

# Writes a numbered list of funtoo profiles and status. Breaks up each type.
write_numbered_funtoo_list() {
	local defaults arch build flavor mixins stable spacing x=1

	arch=( $(awk '$1 == "arch" { print $2 }' "${PROFILE_DESC_FILE}") )
	build=( $(awk '$1 == "build" { print $2 }' "${PROFILE_DESC_FILE}") )
	flavor=( $(awk '$1 == "flavor" { print $2 }' "${PROFILE_DESC_FILE}") )
	mixins=( $(awk '$1 == "mix-ins" { print $2 }' "${PROFILE_DESC_FILE}") )
	defaults=( $(awk '$1 == "2008" { print $2 }' "${PROFILE_DESC_FILE}") )

	# Find longest profile in order to space columns. Add 3 spaces to length of longest one.
	spacing=0
	for profile in ${arch[@]} ${build[@]} ${flavor[@]} ${mixins[@]} S{defaults[@]} ; do
		if [[ ${#profile} -gt ${spacing} ]] ; then
			spacing=${#profile}
		fi
	done
	spacing=$(( ${spacing} + 3 ))

	write_list_start "Currently available architectures:"
	for profile in ${arch[@]} ; do
		local spaceme=$(( ${spacing} - ${#profile}  ))
		stable=( $(awk '($2 == "'"${profile}"'") && (NF >= 3) { print $3 }' "${PROFILE_DESC_FILE}") )
		write_numbered_funtoo_list_entry "${x}" "${profile}" "arch" "${stable}" "${spaceme}"
		x=$(( ${x}+1 ))
	done

	write_list_start "Currently available builds:"
	for profile in ${build[@]} ; do
		local spaceme=$(( ${spacing} - ${#profile} + 1 ))
		stable=( $(awk '($2 == "'"${profile}"'") && (NF >= 3) { print $3 }' "${PROFILE_DESC_FILE}") )
		write_numbered_funtoo_list_entry "${x}" "${profile}" "build" "${stable}" "${spaceme}"
		x=$(( ${x}+1 ))
	done

	write_list_start "Currently available flavors:"
	for profile in ${flavor[@]} ; do
		local spaceme=$(( ${spacing} - ${#profile} + 2 ))
		stable=( $(awk '($2 == "'"${profile}"'") && (NF >= 3) { print $3 }' "${PROFILE_DESC_FILE}") )
		write_numbered_funtoo_list_entry "${x}" "${profile}" "flavor" "${stable}" "${spaceme}"
		x=$(( ${x}+1 ))
	done

	write_list_start "Currently available mixins:"
	for profile in ${mixins[@]} ; do
		local spaceme=$(( ${spacing} - ${#profile} + 3 ))
		stable=( $(awk '($2 == "'"${profile}"'") && (NF >= 3) { print $3 }' "${PROFILE_DESC_FILE}") )
		write_numbered_funtoo_list_entry "${x}" "${profile}" "mix-ins" "${stable}" "${spaceme}"
		x=$(( ${x}+1 ))
	done

	# 2008 profiles for transitional purposes
	if [[ ! -z "${defaults}" ]] ; then
		write_list_start "Currently available 2008 profiles:"
		for profile in ${defaults[@]} ; do
			local spaceme=$(( ${spacing} - ${#profile} - 10 ))
			stable=( $(awk '($2 == "'"${profile}"'") && (NF >= 3) { print $3 }' "${PROFILE_DESC_FILE}") )
			write_numbered_funtoo_list_entry "${x}" "${profile}" "2008" "${stable}" "${spaceme}"
			x=$(( ${x}+1 ))
		done

		# Warn about mixing 2008 profiles with funtoo if necessary
		echo ""
		write_important_msg "The funtoo profiles are not meant to be used with the 2008 profiles. Please remove any 2008 profiles when switching to the funtoo profiles"
		echo ""
	fi

	local valid=( $(validate_config_file) )
	if [[ "${valid}" == "False" ]] ; then
		write_warning_msg "Your current profile setup is invalid. Please see error messages above"
	fi

}

describe_list() {
	echo "List available profile targets"
}

do_list() {
	write_numbered_funtoo_list
}

### ADD ACTION ###

# Adds a funtoo profile to the PARENT_FILE.
add_profile() {
	local target="${1}"

	# Remove colon from profile name if present
	if [[ "${target:0:1}" == ":" ]] ; then
		target="${target:1}"
	fi

	# Remove temporary parent file if it exists
	if [[ -e "${TEMP_PARENT_FILE}" ]] ; then
		rm -f "${TEMP_PARENT_FILE}" || die -q "Can't remove ${TEMP_PARENT_FILE}"
	fi

	# Need type to determine where to add profile
	local profile_type=( $(awk '$2 == "'"${target}"'" { print $1 }' "${PROFILE_DESC_FILE}") )

	# arch=1 build=2 flavor=3 mixins=3 2008=5 other=4
	local type_number
	case "${profile_type}" in
		arch)
			type_number=1
			;;
		build)
			type_number=2
			;;
		flavor)
			type_number=3
			;;
		mix-ins)
			type_number=4
			;;
		2008)
			type_number=5
			;;
		*)
			type_number=6
			;;
	esac

	local already_set
	for profile in $(get_current_profiles) ; do

		local current_type current_type_number

		if [[ "${profile:0:1}" == ":" ]] ; then
			current_type=( $(awk '$2 == "'"${profile:1}"'" { print $1 }' "${PROFILE_DESC_FILE}") )
		fi

		case "${current_type}" in
			arch)
				if [[ "${profile_type}" == "${current_type}" ]] ; then
					die_with_multiple_profiles "${profile_type}"
				fi
				current_type_number=1
				;;
			build)
				if [[ "${profile_type}" == "${current_type}" ]] ; then
					die_with_multiple_profiles "${profile_type}"
				fi
				current_type_number=2
				;;
			flavor)
				if [[ "${profile_type}" == "${current_type}" ]] ; then
					die_with_multiple_profiles "${profile_type}"
				fi
				current_type_number=3
				;;
			mix-ins)
				current_type_number=4
				;;
			2008)
				if [[ "${profile_type}" == "${current_type}" ]] ; then
					die_with_multiple_profiles "${profile_type}"
				fi
				current_type_number=5
				;;
			*)
				current_type_number=6
				;;
		esac

		if [[ -z "${already_set}" ]] ; then
			if (( ${current_type_number} <= ${type_number} )) ; then
				echo "${profile}" >> "${TEMP_PARENT_FILE}"
			else
				echo ":${target}" >> "${TEMP_PARENT_FILE}"
				echo "${profile}" >> "${TEMP_PARENT_FILE}"
				already_set="yes"
			fi
		else
			echo "${profile}" >> "${TEMP_PARENT_FILE}"
		fi
	done

	# If target not already_set above then it needs added to end of PARENT_FILE
	if [[ -z "${already_set}" ]] ; then
		echo ":${target}" >> "${TEMP_PARENT_FILE}"
	fi

	if [[ -e "${TEMP_PARENT_FILE}" ]] ; then
		mv "${TEMP_PARENT_FILE}" "${PARENT_FILE}"
	else
		die -q "Something went wrong. Can not find ${TEMP_PARENT_FILE}. Profile not added"
	fi
}

describe_add() {
	echo "Adds a profile to ${PARENT_FILE}"
}

do_add() {
	local force
	if [[ "${1}" == "--force" ]] ; then
		force="--force"
		shift
	fi

	local target="${1}"
	[[ -z "${target}" ]] && die -q "You didn't tell me what profile to add."

	# Convert if number
	if is_number "${target}" ; then
		target=( $(convert_list_number "${target}") )
		if [[ -z "${target}" ]] ; then
			die -q "Could not find profile #${1}"
		fi
	fi

	# Check if profile is valid
	local valid=( $(validate_profile "${target}") )
	if [[ "${valid}" != "True"  && -z "${force}" ]] ; then
		die -q "${target} does not appear to be a valid profile. Use '--force' to override."
	fi

	# If ${target} doesn't begin with a ":", ".",  or "/", assume it's relative to PROFILE_DIRECTORY
	if [[ "${target:0:1}" != ":" && "${target:0:1}" != "." && "${target:0:1}" != "/" ]]; then
		target=":${target}"
	fi

	# Check if no current profiles
	local current_profiles=( $(get_current_profiles) )
	if [[ -z "${current_profiles}" ]] ; then
		echo "${target}" >> "${PARENT_FILE}"
		return
	fi

	# Check if profile is already set
	for line in "${current_profiles[@]}" ; do
		if [[ "${line}" == "${target}" ]] ; then
			write_error_msg "Profile ${target} is already in ${PARENT_FILE}."
			return
		fi
	done

	# If absolute or relative path, just add to end of file
	if [[ "${target:0:1}" == "/" || "${target:0:1}" == "." ]] ; then
		echo "${target}" >> "${PARENT_FILE}"
	fi

	# Check for NoMix
	local nomix=( $(check_for_nomix "${target}") )
	if [[ -n "${nomix}" ]] ; then
		if [[ -z "${force}" ]] ; then
			die -q "Current profile contains the profile(s) '${nomix[@]}' which should not be used with '${target}'. Use --force to override"
		else
			write_warning_msg "Current profile contains the profile(s) '${nomix[@]}' which should not be used with '${target}'. Forcing anyway"
		fi
	fi

	add_profile "${target}"

	# Check config file
	local valid=( $(validate_config_file) )
	if [[ "${valid}" == "False" ]] ; then
		write_warning_msg "Your current profile setup is invalid. Please see error messages above."
	fi

}

### REMOVE ACTION ###

remove_profile() {

	local target=${1}

	if is_number "${target}" ; then
		target=( $(convert_list_number ${target}) )
	fi

	if [[ "${target:0:1}" != ":" && "${target:0:1}" != "." && "${target:0:1}" != "/" ]] ; then
		target=":${target}"
	fi

	if [[ -e "${TEMP_PARENT_FILE}" ]] ; then
		rm -f "${TEMP_PARENT_FILE}" || die -q "Can't remove ${TEMP_PARENT_FILE}"
	fi

	for line in $(get_current_profiles) ; do
		if [[ "${line}" != "${target}" ]] ; then
			echo "${line}" >> "${TEMP_PARENT_FILE}"
		fi
	done

	if [[ ! -e "${TEMP_PARENT_FILE}" ]] ; then
		touch "${TEMP_PARENT_FILE}"
	fi

	mv "${TEMP_PARENT_FILE}" "${PARENT_FILE}"
}

describe_remove() {
	echo "Removes a profile from ${PARENT_FILE}"
}

do_remove() {

	if [[ -z "${1}" ]] ; then
		die -q "You didn't tell me what profile to remove."
	fi

	# Check if no current profiles
	local current_profiles=( $(get_current_profiles) )
	if [[ -z "${current_profiles}" ]] ; then
		die -q "You have no profiles to remove"
	fi

	remove_profile "${1}" || die -q "Couldn't remove profile"

	local valid=( $(validate_config_file) )
	if [[ "${valid}" == "False" ]] ; then
		write_warning_msg "Your current profile setup is invalid. Please see error messages above."
	fi

}

### REPLACE ACTION ###

describe_replace() {
	echo "Replaces a current profile with a new profile. Usage:'eselect profile replace <old_profile> <new_profile>'"
}

do_replace() {
	local force
	if [[ "${1}" == "--force" ]] ; then
		force="--force"
		shift
	fi

	local old_profile new_profile
	if [[ $# -lt 2 ]] ; then
		die -q "The 'replace' option requires 2 arguments. Usage: eselect profile replace <old_profile> <new_profile>"
	else
		if is_number "${1}" ; then
			old_profile=( $(convert_list_number "${1}") )
		else
			old_profile="${1}"
		fi

		if is_number "${2}" ; then
			new_profile=( $(convert_list_number "${2}") )
		else
			new_profile="${2}"
		fi
	fi

	# If no current profiles, just use do_add() on new_profile
	local current_profiles=( $(get_current_profiles) )
	if [[ -z "${current_profiles}" ]] ; then
		do_add "${new_profile}"
		return
	fi

	# If profile doesn't begin with a ":", ".", or "/", assume its relative to PORTDIR/profiles
	if [[ "${old_profile:0:1}" != ":" && "${old_profile:0:1}" != "." && "${old_profile:0:1}" != "/" ]]; then
		old_profile=":${old_profile}"
	fi

	if [[ "${new_profile:0:1}" != ":" && "${old_profile:0:1}" != "." && "${new_profile:0:1}" != "/" ]]; then
		new_profile=":${new_profile}"
	fi

	# Check if profiles are the same
	if [[ "${new_profile}" == "${old_profile}" ]] ; then
		write_error_msg "Old profile matches new profile. Nothing to replace."
		return
	fi

	# Remove old_profile and add new_profile
	remove_profile "${old_profile}"
	if [[ -n "${force}" ]] ; then
		do_add "${force}" "${new_profile}"
	else
		do_add "${new_profile}"
	fi

}

